{"name":"Adamin-clone","body":"# Adamin Clone\r\n[![Build Status](https://secure.travis-ci.org/pensive612/Adamin-Clone.png)](http://travis-ci.org/[pensive612]/[Adamin-Clone])\r\nI created this plugin because I'm constantly creating mocks and hate duplicating my html unnecessarily.  If you do the same, this plugin should help.\r\n\r\nInstead of creating 25 ```<li>``` elements in a ```<ul>```, I do this:\r\n\r\n```html\r\n<ul>\r\n  <li data-clone=\"25\">Test item</li>\r\n</ul>\r\n```\r\nYou can play with a fiddle of the plugin [here](http://jsfiddle.net/adamin/u46Ps/15/).\r\n\r\n## Getting Started\r\nDownload the [production version][min] or the [development version][max].\r\n\r\n[min]: https://raw.github.com/pensive612/Adamin-Clone/master/dist/adamin_clone.min.js\r\n[max]: https://raw.github.com/pensive612/Adamin-Clone/master/dist/adamin_clone.js\r\n\r\nIn your web page:\r\n\r\n```html\r\n<!-- Load the source files -->\r\n<script src=\"src/jquery.js\"></script>\r\n<script src=\"src/adamin_clone.min.js\"></script>\r\n\r\n<!-- Call the plugin -->\r\n<script>\r\n  jQuery(function($) {\r\n    $('data-clone').adaminClone(); // \"adds plugin to any element that has data-clone attribute\"\r\n  });\r\n</script>\r\n\r\n<!-- Then just add the data-clone attribute to any element in your html to clone it -->\r\n<ul>\r\n  <li data-clone=\"10\"></li>\r\n</ul>\r\n```\r\n\r\n## Examples\r\n#### Standard Implementation\r\nThis will load the plugin and clone any element that has a ```data-clone``` attribute with a number value.\r\n\r\n```html\r\n<script>\r\n  jQuery(function($) {\r\n    $('data-clone').adaminClone(); // \"adds plugin to any element that has data-clone attribute\"\r\n  });\r\n</script>\r\n\r\n<!-- now just add a data-clone attribute and number value -->\r\n<ul class=\"list-container\">\r\n  <li data-clone=\"6\"></li>\r\n</ul>\r\n```\r\n\r\nyou can use table rows, divs or anything you like:\r\n```html\r\n<table>\r\n  <tr data-clone=\"30\">\r\n    <td></td>\r\n    <td></td>\r\n    <td></td>\r\n  </tr>\r\n</table>\r\n```\r\n\r\nyou can even nest cloned elements:\r\n```html\r\n<table data-clone=\"3\">\r\n  <tr data-clone=\"10\">\r\n    <td></td>\r\n    <td></td>\r\n    <td></td>\r\n  </tr>\r\n</table>\r\n```\r\n\r\n#### Adding a Callback\r\nYou might want to add a callback after the items are cloned.  Just use the standard convention:\r\n\r\n```javascript\r\n$('data-clone').adaminClone({}, function() {\r\n  // Put your callback logic inside the function\r\n  window.console.log($(this) + ' was just cloned!');\r\n});\r\n```\r\n\r\n#### Overriding the Data-Cap Option\r\nIf you want to clone more than a 100 items to an element.  You need to set a higher clone-cap value.  You can do this in a couple ways.\r\n\r\nIn the plugin call:\r\n```javascript\r\n$('data-clone').adaminClone({\r\n  cloneCap: 500 // put your new number value here\r\n});\r\n```\r\n\r\nOr you can do it in the html directly, if you want to override individually:\r\n```html\r\n<li data-clone=\"120\" data-clone-cap='{\"cloneCap\":\"200\"}'>My item</li>\r\n```\r\n\r\n## Documentation\r\nThis plugin is a utilization of the jquery [.clone()](http://api.jquery.com/clone/) method.  \r\n\r\nCurrently, the behavior of jQuery .clone() is to clone the element 1 time.  And should be separately prepended/appended to a specified container.\r\n\r\nThis plugin instead, allows you duplicate the element any number of times, and insert them directly after the cloned element.\r\n\r\nThe plugin also creates enumerated classes if you need to target any specific clones.  Each cloned element should have a class of 'clone-i'. \r\n\r\nIt also passes the 'true' argument, so all clones retain any events bound to the original element.\r\n\r\nFor validation purposes, there is a default 'cap' of amount of times an element can be cloned.  It is set to ```'100'```. This is to prevent accidentally inserting a 1000 elements into the DOM.\r\n\r\nHowever, you can easily override this 'cap' value by changing the defaults of the plugin, or within a data-attribute directly in the element.  \r\n\r\nAnd lastly, you can utilize a callback function after the plugin is run.  \r\n\r\n**See 'Examples' for all usage.**\r\n\r\nAlthough you will most likely only be using this plugin in a mocking/development environment.  It is around 1k and 600 bytes gzipped.\r\n\r\nIt is tested using [qunit](http://qunitjs.com/) and built using [grunt](https://github.com/cowboy/grunt).\r\n\r\n## License\r\nCopyright (c) 2012 Adam L.  \r\nLicensed under the MIT, GPL licenses.\r\n\r\n## Contributing\r\nAny pull requests will be happily reviewed.  Please make sure they are tested, documented and use [grunt](https://github.com/cowboy/grunt).","google":"UA-35093892-1","tagline":"A really easy way to quickly clone elements when prototyping or creating mocks.","note":"Don't delete this file! It's used internally to help with page regeneration."}